// ==UserScript==
// @name        Youtube Mark Spam Comments
// @namespace   CoPe
// @description Mark Spam all visible Youtube comments!
// @match       *://studio.youtube.com/channel/*/comments/*
// @version     1
// @grant       none
// @require     https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.15/lodash.min.js
// @require     https://code.jquery.com/jquery-3.4.1.slim.min.js
// ==/UserScript==

/* globals _, $ */

let __removeCommentCheck = '/allactivity/removecontent/?category_key=commentscluster&action=remove_comment';

let __createYoutubeMarkSpamCommentsFrame = () => {
	let frame = $('<div id="_ytmarkspam"">Youtube Mark Spam Comments<br/><br/></div>');
	frame.css({
		position: 'fixed',
		width: '150px',
		top: '10px',
		right: '20px',
		background: '#00f',
		color: '#fff',
		padding: '10px',
		'z-index': 1000,
		'box-shadow': '2px 2px 2px #33a'
	});
	return frame;
};

let __createYoutubeMarkSpamCommentsScrollButton = () => {
	let scrollButton = $('<button">Scroll</button>');
	scrollButton.css({cursor: 'pointer', float: 'left'});
	return scrollButton;
};

let __createYoutubeMarkSpamCommentsScrollOffButton = () => {
	let scrollOffButton = $('<button">Stop Scrolling</button>');
	scrollOffButton.css({cursor: 'pointer', float: 'right'});
	scrollOffButton.hide();
	return scrollOffButton;
};

let __createYoutubeMarkSpamCommentsDeleteButton = () => {
	let deleteButton = $('<button">Mark Spam</button>');
	deleteButton.css({cursor: 'pointer', float: 'left'});
	return deleteButton;
};

let __createYoutubeMarkSpamCommentsStopButton = () => {
	let deleteOffButton = $('<button">Stop Marking</button>');
	deleteOffButton.css({cursor: 'pointer', float: 'right'});
	deleteOffButton.hide();
	return deleteOffButton;
};

class YoutubeMarkSpamComments {
	constructor() {
		this.delay = 4000;
		this.keepScrolling = false;
		this.keepDeleting = false;

		this.frame = __createYoutubeMarkSpamCommentsFrame();

		let row1 = $('<div"></div>');
		this.scrollButton = __createYoutubeMarkSpamCommentsScrollButton();
		this.scrollOffButton = __createYoutubeMarkSpamCommentsScrollOffButton();
		this.scrollButton.click(this.onScroll.bind(this));
		this.scrollOffButton.click(this.onStopScroll.bind(this));
		row1.append(this.scrollButton);
		row1.append(this.scrollOffButton);

		let row2 = $('<div"></div>');
		this.deleteButton = __createYoutubeMarkSpamCommentsDeleteButton();
		this.deleteOffButton = __createYoutubeMarkSpamCommentsStopButton();
		this.deleteButton.click(this.onDelete.bind(this));
		this.deleteOffButton.click(this.onStopDeleting.bind(this));
		row2.append(this.deleteButton);
		row2.append(this.deleteOffButton);

		this.frame.append(row1);
		this.frame.append($('<br/><br/>'));
		this.frame.append(row2);
		$('body').append(this.frame);

		this.timeouts = [];

		console.log("Youtube Mark Spam Comments initiated.");
		this.scroll();
	}

	removeComment(pen) {
		if (!this.keepDeleting) return;
		pen.click();

		setTimeout(function () {
			let rems = document.getElementsByClassName("style-scope ytd-menu-service-item-renderer");
			rems = _.filter(rems, (rem) => {
				return rem.textContent === 'Report';
			});
			let rem = _.first(rems);

			rem.click();
			setTimeout(function () {
				let radios = document.querySelectorAll('paper-radio-button');
				let radio = _.first(radios);
				radio.click();

				setTimeout(function () {
					document.getElementById('submit-button').click();
                    setTimeout(function () {
                        document.getElementById('confirm-button').click();
                    }, 800);
                }, 100);
			}, 500);
		}, 500);
	}

	quickScroll() {
		if (this.keepDeleting) {
            let main = document.getElementById('main');
            main.scrollTo(0, main.scrollHeight);
            setTimeout(() => main.scrollTo(0, main.scrollHeight), 2500);
            setTimeout(() => main.scrollTo(0, 0), 5000);
        }
	}

	continueDeleting() {
		if (this.keepDeleting) this.deleteAllComments();
		else this.onStopDeleting();
	}

	deleteAllComments() {
		let pens = document.querySelectorAll('[aria-label="Action menu"]');
		console.log("Deleting all " + pens.length + " comments.");
		let count = 0;
		_.forEach(pens, (pen) => {
			this.timeouts.push(setTimeout(() => this.removeComment(pen), (++count) * this.delay));
		});
		this.timeouts.push(setTimeout(() => this.quickScroll(), (count/2) * this.delay));
		this.timeouts.push(setTimeout(() => this.continueDeleting(), (++count) * this.delay));
	}

	onScroll() {
		this.keepDeleting = false;
		this.keepScrolling = true;
		this.deleteButton.show();
		this.deleteOffButton.hide();
		this.scrollButton.hide();
		this.scrollOffButton.show();
	}

	onStopScroll() {
		this.keepDeleting = false;
		this.keepScrolling = false;
		this.deleteButton.show();
		this.deleteOffButton.hide();
		this.scrollButton.show();
		this.scrollOffButton.hide();
	}

	onDelete() {
		this.keepDeleting = true;
		this.keepScrolling = false;
		this.deleteButton.hide();
		this.deleteOffButton.show();
		this.scrollButton.hide();
		this.scrollOffButton.hide();
		this.deleteAllComments();
	}

	onStopDeleting() {
		this.keepDeleting = false;
		this.keepScrolling = false;
		this.deleteButton.show();
		this.deleteOffButton.hide();
		this.scrollButton.show();
		this.scrollOffButton.hide();

		console.log('Stopping deletions.');
		_.each(this.timeouts, (tmo) => clearTimeout(tmo));
	}

	scroll() {
		let main = document.getElementById('main');
		if (this.keepScrolling) main.scrollTo(0, main.scrollHeight);
		setTimeout(this.scroll.bind(this), 500);
	}
}

new YoutubeMarkSpamComments();
